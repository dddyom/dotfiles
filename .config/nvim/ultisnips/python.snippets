snippet imp
	import ${0:module}
endsnippet


snippet from
	from ${1:package} mport ${0:module}
endsnippet


snippet wh
	while ${1:condition}:
		${0:${VISUAL}}
endsnippet


snippet dowh
	while True:
		${1}
		if ${0:condition}:
			break
endsnippet


snippet with
	with ${1:expr} as ${2:var}:
		${0:${VISUAL}}
endsnippet


snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${0}
endsnippet


snippet cla
	class ${1:class_name}:
		"""${0:description}"""
endsnippet


snippet clai
	class ${1:class_name}:
		"""${2:description}"""
		def __init__(self, ${3:args}):
			${0}
endsnippet


snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${0}
endsnippet


snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}
endsnippet


snippet adef
	async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${0}
endsnippet


snippet adeff
	async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}
endsnippet


snippet defi
	def __init__(self, ${1:args}):
		${0}
endsnippet


snippet property
	@property
	def ${1:foo}(self) -> ${2:type}:
		"""${3:doc}"""
		return self._$1

	@$1.setter
	def $1(self, value: $2):
		self._$1 = value

endsnippet


snippet if
	if ${1:condition}:
		${0:${VISUAL}}
endsnippet


snippet el
	else:
		${0:${VISUAL}}
endsnippet


snippet ei
	elif ${1:condition}:
		${0:${VISUAL}}
endsnippet


snippet for
	for ${1:item} in ${2:items}:
		${0}
endsnippet


snippet cutf8
	# -*- coding: utf-8 -*-
endsnippet


snippet clatin1
	# -*- coding: latin-1 -*-
endsnippet


snippet cascii
	# -*- coding: ascii -*-
endsnippet


snippet ld
	${1:var} = lambda ${2:vars} : ${0:action}
endsnippet


snippet ret
	return ${0}
endsnippet


snippet .
	self.
endsnippet


snippet try 
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${0:raise $3}
endsnippet


snippet trye 
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${0}
endsnippet


snippet tryf 
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	finally:
		${0}
endsnippet


snippet tryef 
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}
endsnippet


snippet ifmain
	if __name__ == '__main__':
		${0:main()}
endsnippet


snippet _
	__${1:init}__
endsnippet


snippet "
	"""${0:doc}
	"""
endsnippet
